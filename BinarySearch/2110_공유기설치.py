# 문제
# 도현이의 집 N개가 수직선 위에 있다. 각각의 집의 좌표는 x1, ..., xN이고, 집 여러개가 같은 좌표를 가지는 일은 없다.

# 도현이는 언제 어디서나 와이파이를 즐기기 위해서 집에 공유기 C개를 설치하려고 한다. 최대한 많은 곳에서 와이파이를 사용하려고 하기 때문에, 한 집에는 공유기를 하나만 설치할 수 있고, 가장 인접한 두 공유기 사이의 거리를 가능한 크게 하여 설치하려고 한다.

# C개의 공유기를 N개의 집에 적당히 설치해서, 가장 인접한 두 공유기 사이의 거리를 최대로 하는 프로그램을 작성하시오.

# 입력
# 첫째 줄에 집의 개수 N (2 ≤ N ≤ 200,000)과 공유기의 개수 C (2 ≤ C ≤ N)이 하나 이상의 빈 칸을 사이에 두고 주어진다. 둘째 줄부터 N개의 줄에는 집의 좌표를 나타내는 xi (0 ≤ xi ≤ 1,000,000,000)가 한 줄에 하나씩 주어진다.

# 출력
# 첫째 줄에 가장 인접한 두 공유기 사이의 최대 거리를 출력한다.

# 예제 입력 1 
# 5 3
# 1
# 2
# 8
# 4
# 9
# 예제 출력 1 
# 3

N,C = map(int,input().split()) # 집 개수, 공유기 개수 

home = [int(input()) for _ in range(N)]
home.sort()

# 공유기 사이의 거리 찾기 
# mid = 최소 거리, 최대 거리의 중앙 
start ,end = 1, home[-1]-home[0]
result = 0

while start <= end:
    mid = (start+end)//2
    now = home[0] # 현재 집 - 0번째 집부터 시작  
    cnt = 1 # 공유기 수 count(0번째 집 공유기 count) 

    for i in range(1,len(home)):
        # 현재 집에서 다음 집의 거리가 mid 이상 => 공유기 설치 o         
        if home[i]-now >=mid:
            cnt +=1 # 공유기 설치 
            now = home[i] # 공유기 설치한 집부터 끝까지 검사 
        
    # 설치해야하는 공유기의 수가 공유기의 수보다 많다면  
    # 최댓값을 찾아야 하므로 같을때도 비교한다. 
    if cnt >= C: 
        # 공유기 사이 간격을 넓힌다.
        start = mid+1
        result = mid
    # 설치해야하는 공유기의 수가 공유기의 수보다 적다면  
    else:
        # 공유기 사이 간격을 줄인다. 
        end = mid-1

print(result)

# 후기 
# 이분탐색 자신있다 생각했는데, 이 문제 보고 자신감 다시 들어갔다
# 무엇을 이분 탐색으로 찾아야 하는지 떠오르지 않았다 ㅠ ㅠ 
# https://my-coding-notes.tistory.com/119 이분의 해법을 보고 참고해서 풀었다
# 이해는 했는데 비슷한 맥락으로 꼬아서 나오면 못 풀 것 같다
# 나중에 다시 풀어보자!! 
# 시간 초과났다. 
# dj