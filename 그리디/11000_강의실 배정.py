# 강의실 배정

# 문제
# 수강신청의 마스터 김종혜 선생님에게 새로운 과제가 주어졌다. 

# 김종혜 선생님한테는 Si에 시작해서 Ti에 끝나는 N개의 수업이 주어지는데, 최소의 강의실을 사용해서 모든 수업을 가능하게 해야 한다. 

# 참고로, 수업이 끝난 직후에 다음 수업을 시작할 수 있다. (즉, Ti ≤ Sj 일 경우 i 수업과 j 수업은 같이 들을 수 있다.)

# 수강신청 대충한 게 찔리면, 선생님을 도와드리자!

# 입력
# 첫 번째 줄에 N이 주어진다. (1 ≤ N ≤ 200,000)

# 이후 N개의 줄에 Si, Ti가 주어진다. (0 ≤ Si < Ti ≤ 109)

# 출력
# 강의실의 개수를 출력하라.

#----------------------------------------------- 풀이 ---------------------------------------------------------#

# bfs로 풀어야 하나.. 고민하다가 우선순위큐 문제라길래 풀이를 참고했다.. ㅎㅎ 

# 문제 풀이 방법은 단순하다.
# 1. 첫 강의 종료 시간과 두번재 회의 시작 시간 비교 
# 2. 만약, 첫 강의 종료 시간 보다 두번째 강의 시작 시간이 크면 강의시간을 연장한다.
#    - 강의를 연장하는 방법은 우선순위 queue를 사용한다.
#    - 현재 강의 시간을 새로운 강의 시간으로 변경하기 위해 우선순위큐를 pop한 뒤, 새로운 강의 시간을 queue에 넣어준다.

# 3. 만약, 첫 강의 종료 시간 보다 두번째 강의 시작 시간이 작으면 새로운 강의실을 추가해준다.
# 4. 2번과 3번 내용을 강의를 돌면서 반복한다. 
# https://hongcoding.tistory.com/79 이 분의 풀이를 참고하였다! 

import heapq

n = int(input())
lect = []

# 강의 입력 
for i in range(n):
    s,t = map(int,input().split())
    lect.append([s,t])

# 강의 시작 시간 기준 정렬 
lect.sort()

room = []
heapq.heappush(room,lect[0][1]) # 첫 강의 종료 시간 

for i in range(1,len(lect)):
    # 강의 종료 시간(ex. 3) <= 다음 강의 시작 시간(ex. 4) 
    if room[0] <= lect[i][0]:
        # 강의 연장
        heapq.heappop(room) # 현재 강의 종료 시간 빼고 
        heapq.heappush(room,lect[i][1]) # 다음 강의 종료 시간 추가 
    # 강의 종료 시간 > 다음 강의 시간 
    else:
        # 새로운 강의실 추가 
        heapq.heappush(room,lect[i][1])

print(len(room))